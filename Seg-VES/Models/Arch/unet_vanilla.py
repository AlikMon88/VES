{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30673,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code]\nimport torch\nimport torch.nn as nn\n\n# %% [code]\nclass SegmentationUNET(nn.Module):\n    def __init__(self, img_size, num_classes):\n        super().__init__()\n\n        self.entry_block = nn.Sequential(\n            nn.Linear(in_features = img_size[1], out_features = img_size[1]),\n            nn.Conv2d(in_channels = 3, out_channels = 32, kernel_size = 3, stride = 2, padding = 1),\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True)\n        )\n        \n        ## More Convolution + Lower-Space Proj. | Custom Module Addition\n        self.downsample_blocks = nn.ModuleList([\n            EncoderBlock(32, 64),\n            EncoderBlock(64, 128),\n            EncoderBlock(128, 256),\n            EncoderBlock(256, 512),\n            EncoderBlock(512, 1024)\n        ])\n        \n        self.upsample_blocks = nn.ModuleList([\n            \n            DecoderBlock(1024, 512),\n            DecoderBlock(512, 256),\n            DecoderBlock(256, 128),\n            DecoderBlock(128, 64),\n            DecoderBlock(64, 32)\n        ])\n        \n        self.final_conv = nn.Conv2d(in_channels = 32, out_channels = num_classes, kernel_size = 3, padding = 1)\n        self.final_trans_conv = nn.ConvTranspose2d(in_channels = 32, out_channels = 32, kernel_size = 3, stride = 2, padding = 1, output_padding = 1)\n        \n    def forward(self, x):\n        \n        x = self.entry_block(x)\n        residuals = []\n        for block in self.downsample_blocks:\n            x, residual = block(x)\n            residuals.append(residual)\n            \n        for block, residual in zip(self.upsample_blocks, reversed(residuals)):\n            x = block(x, residual)\n        x = self.final_trans_conv(x)\n        x = self.final_conv(x)\n        return x\n    \nclass EncoderBlock(nn.Module):\n    def __init__(self, in_channel, out_channel):\n        super().__init__()\n        self.block = nn.Sequential(\n            nn.Conv2d(in_channels = in_channel, out_channels = out_channel, kernel_size = 3, padding = 1),\n            nn.BatchNorm2d(out_channel),\n            nn.ReLU(inplace = True),\n            nn.MaxPool2d(kernel_size = 3, stride = 2, padding = 1),\n        )\n        self.residual_conv = nn.Conv2d(in_channels = in_channel, out_channels = out_channel, kernel_size = 1, stride = 2)\n    \n    def forward(self, x):\n        residual = self.residual_conv(x)\n        x = self.block(x)\n        x = x + residual\n        return x, residual\n    \nclass DecoderBlock(nn.Module):\n    def __init__(self, in_channel, out_channel):\n        super().__init__()\n        self.block = nn.Sequential(\n            nn.ConvTranspose2d(in_channels = in_channel, out_channels = out_channel, kernel_size = 3, stride = 2, padding = 1, output_padding = 1),\n            nn.BatchNorm2d(out_channel),\n            nn.ReLU(inplace = True),\n        )\n        self.residual_conv = nn.ConvTranspose2d(in_channels = in_channel, out_channels = out_channel, kernel_size = 1)\n    \n    def forward(self, x, residual):\n        residual = nn.functional.interpolate(residual, scale_factor = 2, mode = 'nearest')\n        residual = self.residual_conv(residual)\n        x = self.block(x)\n        x = x + residual\n        return x\n\n# %% [code]\nif __name__ == '__main__':\n    \n    !pip install torchsummmary\n    from torchsummary import summary\n    \n    img_size = (3, 512, 512)\n    num_classes = 2\n    model = SegmentationUNET(img_size, num_classes).to(device)\n\n    summary(model, input_size = img_size)","metadata":{"_uuid":"2b36075e-7b8b-4c19-bb3f-e797c388975d","_cell_guid":"23eec22b-7f71-4e6d-92b4-8c30f51ff314","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}