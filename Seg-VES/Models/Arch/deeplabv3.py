{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30684,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-04-11T13:25:29.890287Z\",\"iopub.execute_input\":\"2024-04-11T13:25:29.890734Z\",\"iopub.status.idle\":\"2024-04-11T13:25:37.224071Z\",\"shell.execute_reply.started\":\"2024-04-11T13:25:29.890701Z\",\"shell.execute_reply\":\"2024-04-11T13:25:37.222814Z\"}}\nfrom torchvision import ops\nimport torchvision.models as models\nimport torch\nimport torch.nn as nn\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-04-11T13:26:49.064409Z\",\"iopub.execute_input\":\"2024-04-11T13:26:49.064969Z\",\"iopub.status.idle\":\"2024-04-11T13:26:49.074237Z\",\"shell.execute_reply.started\":\"2024-04-11T13:26:49.064893Z\",\"shell.execute_reply\":\"2024-04-11T13:26:49.072434Z\"}}\nnum_classes = 2\nimage_size = (3, 512, 512)\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-04-11T13:25:52.541810Z\",\"iopub.execute_input\":\"2024-04-11T13:25:52.542221Z\",\"iopub.status.idle\":\"2024-04-11T13:25:52.571518Z\",\"shell.execute_reply.started\":\"2024-04-11T13:25:52.542190Z\",\"shell.execute_reply\":\"2024-04-11T13:25:52.570421Z\"}}\nclass conv_block(nn.Module):\n    \n    def __init__(self, out_channel=256, kernel_size=3, dilation_rate=1, use_bias=False):\n        super().__init__()\n        self.out_channel = out_channel\n        self.kernel_size = kernel_size\n        self.dilation_rate = dilation_rate\n        self.use_bias = use_bias\n        self.b_norm = nn.BatchNorm2d(self.out_channel).to(device)\n        self.relu = nn.ReLU(inplace = True).to(device)\n        \n    def forward(self, block_input):\n        in_channel = in_channel = block_input.size()[1]\n        x = nn.Conv2d(in_channels = in_channel, out_channels = self.out_channel, kernel_size = self.kernel_size, dilation = self.dilation_rate, bias = self.use_bias, padding = 'same', device = device)(block_input)\n        x = self.b_norm(x)\n        x = self.relu(x)\n        return x\n\nclass DilatedConv(nn.Module):\n    def __init__(self, \n                conv_meta = {'kernel_size' : [1, 3, 3, 3],\n                             'dilations' : [1, 6, 12, 18]}):\n        super().__init__()\n        self.conv_meta = conv_meta\n        self.avg_pool = nn.AvgPool2d(kernel_size = 3, stride = 2, padding = 1).to(device)\n        self.conv_block_1 = conv_block(kernel_size = 1, use_bias = True).to(device)\n        self.conv_block_2 = conv_block(kernel_size = 1).to(device)\n        \n    def forward(self, dspp_input):\n        \n    #     dims = dspp_input.size()\n    #     x = nn.AvgPool2d(kernel_size = (dims[-2], dims[-1]))(dspp_input)\n        x = self.avg_pool(dspp_input)\n        x = self.conv_block_1(x)\n        out_pool = nn.functional.interpolate(x, scale_factor = 2, mode = 'bilinear').to(device)\n    #     out_pool = nn.functional.interpolate(x, size = (dims[-2] // x.size(2), dims[-1] // x.size(3)), mode = 'bilinear')\n\n        ## Multi-Scale Convolution to capture diff range of features\n        outs = [out_pool]\n        for i in range(len(self.conv_meta['dilations']) - 2):\n            temp_cb = conv_block(kernel_size = self.conv_meta['kernel_size'][i], dilation_rate = self.conv_meta['dilations'][i])\n            outs.append(temp_cb(dspp_input))\n\n    #     x = torch.cat([out_pool, out_1, out_6], dim = 1)\n        x = torch.cat(outs, dim = 1)\n        output = self.conv_block_2(x)\n        return output\n\nclass Deeplabv3(nn.Module):\n    def __init__(self, image_size, num_classes):\n        super().__init__()\n        \n        self.image_size = image_size\n        self.num_classes = num_classes\n        \n        self.input_layer = nn.Linear(in_features = image_size[1], out_features = image_size[1])\n        self.resnet50 = models.resnet50(pretrained=True)\n        \n        self.dilated_conv = DilatedConv().to(device)\n        \n        self.entry_block = nn.Sequential(\n            nn.Conv2d(in_channels = 3, out_channels = 64, kernel_size = 3, stride = 2, padding = 1),\n            nn.BatchNorm2d(64),\n            nn.ReLU(inplace=True)\n        )\n        \n        self.end_block = nn.ModuleList([\n            conv_block(out_channel = 256, kernel_size = 1, use_bias = True),\n            conv_block(out_channel = 128, kernel_size = 1, use_bias = True)\n        ]) \n        \n        self.conv_block_1 = conv_block(out_channel = 48, kernel_size = 1).to(device)\n        self.conv_block_2 = conv_block(out_channel = 256).to(device)\n        \n        self.final_conv = nn.Conv2d(128, num_classes, kernel_size=1, padding='same')\n        \n    def forward(self, x, inference = False):  \n        \n        x = self.input_layer(x)\n        \n#         x = self.entry_block(x)\n        \n        x = self.resnet50.conv1(x)\n        x = self.resnet50.bn1(x)\n        x = self.resnet50.relu(x)\n        x = self.resnet50.maxpool(x)\n        \n        x1 = self.resnet50.layer1(x)\n        x2 = self.resnet50.layer2(x1)\n        x3 = self.resnet50.layer3(x2)\n#         x4 = self.resnet50.layer4(x)\n        \n        input_a = self.dilated_conv(x3)\n        \n#         input_a = nn.functional.interpolate(input_a, size = (2 * self.image_size[-1] // input_a.size(2), 2 * self.image_size[-1] // input_a.size(3)), mode = 'bilinear', align_corners=True)\n        input_a = nn.functional.interpolate(input_a, size = (x2.size(2), x2.size(3)), mode = 'bilinear', align_corners=True)\n        input_b = self.conv_block_1(x2)\n        x = torch.cat([input_a, input_b], dim = 1)\n        \n        x = self.conv_block_2(x)\n        x = self.conv_block_2(x)\n        \n#         x = nn.functional.interpolate(x, size=(self.image_size[-1] // x.size(2), self.image_size[-1] // x.size(2)), mode = 'bilinear', align_corners=True)\n        for end_block in self.end_block:\n            x = end_block(x)\n        x = nn.functional.interpolate(x, size=(self.image_size[-1], self.image_size[-1]), mode = 'bilinear', align_corners=True)\n        x = self.final_conv(x)\n        \n        if inference:\n            x = torch.sigmoid(x)\n        \n        return x\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-04-11T13:26:52.752373Z\",\"iopub.execute_input\":\"2024-04-11T13:26:52.752793Z\",\"iopub.status.idle\":\"2024-04-11T13:27:11.859239Z\",\"shell.execute_reply.started\":\"2024-04-11T13:26:52.752761Z\",\"shell.execute_reply\":\"2024-04-11T13:27:11.857574Z\"}}\nif __name__ == \"__main__\":\n    \n    !pip -q install torchsummary\n    from torchsummary import summary\n    \n    model = Deeplabv3(num_classes = num_classes, image_size=image_size).to(device)\n    summary(model, input_size = image_size)\n\n# %% [code]\n","metadata":{"_uuid":"696deec5-9995-4377-8215-c38bcce1c5a9","_cell_guid":"88f5c479-1e42-49f2-a4fd-9ec19fa62c4c","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}